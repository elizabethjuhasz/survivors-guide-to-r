/// entering data ///
*** creating data in a R environment, importing data from other datasets ***

/// concatenation ///
*** a string of nums or other data should be put together in a vector ***
# entering data with concatenate
myVar = c(1, 7, 3, 5, 9, 21, 8)

# print data
myVar 

# concatenate words into values
myWords = c("ant", "ball", "clown")

# print variable
myWords

/// joining vectors into Matrices and Data Frames ///
cbind()
rbind()

*** joining two or more columns into a matrix ***
cbind(vector1, vector2)

*** cbind() several variables ot be combined into a data set ***
  ** must be sorted in same order **

# cbind
# set up some data
temp = c(78.4, 65.3, 72.9, 81.2)
rain = c(.025, .001, 0, 1.2)
day = c(1, 2, 3, 4)
# cbind demonstration
weather1 = cbind(day, temp, rain)
# show results
weather1

# rbind
# set up some data
day1 = c(.025, 78.4)
day2 = c(.001, 65.3)
day3 = c(0, 72.9)
day4 = c(1.2., 81.2)
# rbind demonstration 
weather2 = rbind(day1, day2, day3, day4)

# show matrix
weather2

# add variable names for the columns
colnames (weather2) = c("rain", "temp")

# show weather2 matrix w/ names
weather2

*** cbind incorporates the variable names as column lables and rbind incorporates as row labels ***
rownames(myData) = 
colnames(myData) =

*** uneven vectors ***
# setup some data
temp = c(78.4, 65.3, 72.9, 81.2)
rain = c(.025, .001, 0, 1.2)
day = c("Saturday", "Sunday")

# combine unequal length vectors w/ cbind
weekend.weather = data.frame(cbind(day, temp, rain))

*** the results will fill in with Sat, Sun ***
# show results
weekend.weather

*** observations in their own vectors use rbind() ***
*** t() transpose to force a column vector as row vect ***

/// entering data w/ the R spreadsheet ///
data.entry()
*** you cannot create a new dataset with data.entry() command however ***
*** also does not preserve the data ***

/// creating data ///

data.entry()

# create varible 1
myX = c(1, 2, 3)

# create variable 2
myY = c("a", "b", "c")

# combine in data frame
myData = cbind(myX, myY)

# open in data entry spreadsheet
data.entry(myData)

*** data.entry() does not preserve the data frame form ***

edit()

/// creating data ///
*** simple sequence repetition *** 
# a variable w/0-10 sequence
myVar1 = 0:10
myVar2 = 10:22
myVar3 = -5:5

seq()
*** functions are the starting value, the ending value, and the step size ***
seq(from=, to=, by=)

# a sequence from 0 to 5 by .5
myVar4= seq(0, 5, by =.5)

# a sequence from 7 to 5 by -.25
myVar5= seq(7, 5, -.25)

# repeat function rep()
myVar1= rep(7, 3)
*** the above will show three 7's ***

myVar2 = c(rep(1, 5), rep(2, 3))
*** the above will show 5 1's, 3 2's ***

# generating factors
factor()

# generate levels
gl()
levels=
*** gl() takes four arguments ***
1] (n=) is the number of levels in the factor
2] (k=) the number of times those levels should each be repeated
3] optional. (length=) the total length of the result
4] also optional. (lables=) a set of labels for the levels

# generate labels
labels=

# set up 3 levels
# each repeats twice
# total length is 6
# matching labels for 3 levels
myFactor = gl(n = 3, k = 2, length = 6, labels = c("small",
"med", "large"))

# set up 2 levels w/4 repeats
myFactor2 = gl(2, 4, 10, c("y", "n"))

*** random numbers and statistical distributions ***
runif(n)

/// importing data ///
*** working with the working directory ***
getwd()

*** set up the working directory ***
setwd()
*** important:  R uses forward slashes / ***
setwd("C:/data")
getwd()

file.choose()

setwd(dirname(file.choose()))
getwd()

/// read command: blank-delimited tables ///
read.table()

*** you can also get data from clipboard ***
myData = read.delim("clipboard", header = TRUE)

*** if there is no header row ****
myData = read.table("myDataFile.txt", header = FALSE)

/// read command: comma-separated values ///
read.csv()

myData = read.csv("myDataFile.csv", header = TRUE)

*** in countries where , is used for decimal ***
read.csv2()

read.table() options:
header = TRUE
sep = ","
quote = "/" ` "
dec = "."
row.names=
column.names=
as.is = TRUE
na.strings = "NA"
colClasses = NA
nrows = -1
skip = 0
check.names = TRUE
fill = !blank.lines.skip
strip.white = FALSE
blank.lines.skip = TRUE
comment.char = "#"
allowEscapes = FALSE
flush = FALSE






